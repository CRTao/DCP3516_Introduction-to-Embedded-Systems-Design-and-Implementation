import sys, os, thread, random, requests
from time import sleep
import RPi.GPIO as GPIO
import time
import Adafruit_ADXL345
import math
import smbus
import string

def getSignedNumber(number):
    if number & (1 << 15):
        return number | ~65535
    else:
        return number & 65535

gyro_bus=smbus.SMBus(1)
i2c_address=0x69

i2c_bus.write_byte_data(i2c_address,0x20,0x0F)
i2c_bus.write_byte_data(i2c_address,0x23,0x20)

accel = Adafruit_ADXL345.ADXL345()

while True:


                i2c_bus.write_byte(i2c_address,0x28)
                X_L = i2c_bus.read_byte(i2c_address)
                i2c_bus.write_byte(i2c_address,0x29)
                X_H = i2c_bus.read_byte(i2c_address)
                X = X_H << 8 | X_L

                i2c_bus.write_byte(i2c_address,0x2A)
                Y_L = i2c_bus.read_byte(i2c_address)
                i2c_bus.write_byte(i2c_address,0x2B)
                Y_H = i2c_bus.read_byte(i2c_address)
                Y = Y_H << 8 | Y_L

                i2c_bus.write_byte(i2c_address,0x2C)
                Z_L = i2c_bus.read_byte(i2c_address)
                i2c_bus.write_byte(i2c_address,0x2D)
                Z_H = i2c_bus.read_byte(i2c_address)
                Z = Z_H << 8 | Z_L

                X = getSignedNumber(X)
                Y = getSignedNumber(Y)
                Z = getSignedNumber(Z)

                print string.rjust(`X`, 10),
                print string.rjust(`Y`, 10),
                print string.rjust(`Z`, 10)
                sleep(0.5)

bus = smbus.SMBus(1)
addrHMC = 0x1e

def read_word(address, adr):
    high = bus.read_byte_data(address, adr)
    low = bus.read_byte_data(address, adr + 1)
    val = (high << 8) + low
    return val

def read_word_2c(address, adr):
    val = read_word(address, adr)
    if (val >= 0x8000):
        return -((65535 - val) + 1)
    else:
        return val

def main():

    bus.write_byte_data(addrHMC, 0, 0b01110000)  # Set to 8 samples @ 15Hz
    bus.write_byte_data(addrHMC, 1, 0b00100000)  # 1.3 gain LSb / Gauss 1090 (default)
    bus.write_byte_data(addrHMC, 2, 0b00000000)  # Continuous sampling

    while True:
        x = read_word_2c(addrHMC, 3)
        y = read_word_2c(addrHMC, 7)
        z = read_word_2c(addrHMC, 5)

        print x,",",y,",",z
        time.sleep(0.1)

if __name__ == "__main__":
    main()
